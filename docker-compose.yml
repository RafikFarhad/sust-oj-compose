version: "3.7"

services:
  nginx:
    build:
      context: ./nginx
    ports:
      - 80:80
    restart: unless-stopped
    volumes: 
      - ./src/subCODE/:/var/www/subCODE
      - ./src/masterCODE/:/var/www/masterCODE
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf/sites-enabled/:/etc/nginx/sites-enabled/
    depends_on:
      - php_sub
      - php_master
      - minio
      - nodejs
    networks: 
      - legacy
    environment:
      SERVICE_NAME: nginx
      SERVICE_TAGS: dev
  php_sub:
    build: 
      context: ./src/subCODE
      args: 
        BUILD: PROD
    working_dir: /var/www/subCODE
    volumes: 
      - ./src/subCODE/:/var/www/subCODE
    ports:
      - 9000:9000
    env_file: 
      - .env
    restart: unless-stopped
    networks: 
      - legacy
    extra_hosts:
      - "dockerhost:192.168.0.112"
    environment:
      SERVICE_NAME: php_sub
      SERVICE_TAGS: dev
  php_master:
    build: 
      context: ./src/masterCODE
      args: 
        BUILD: DEV
        DEBUG_PORT: 9050
    working_dir: /var/www/masterCODE
    volumes: 
      - ./src/masterCODE/:/var/www/masterCODE
    ports:
      - 9001:9000
    restart: unless-stopped
    networks: 
      - legacy
    extra_hosts:
      - "dockerhost:192.168.0.112"
    environment:
      SERVICE_NAME: php_master
      SERVICE_TAGS: dev
  nodejs:
    build:
      context: ./src/liveCODE
    working_dir: /var/www/liveCODE
    volumes:
      - ./src/liveCODE/:/var/www/liveCODE/
      - ./src/subCODE/:/var/www/subCODE/
    restart: unless-stopped
    ports:
      - "3333:3333"
    depends_on:
      - redis
      - rabbitmq
    networks:
      - legacy
    environment:
      SERVICE_NAME: nodejs
      SERVICE_TAGS: dev
  minio:
    image: minio/minio:RELEASE.2020-01-03T19-12-21Z
    volumes:
      - ./volumes/minio:/data
    ports:
      - "9999:9000"
    restart: unless-stopped
    command: server /data
    networks: 
      - legacy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      MINIO_ACCESS_KEY: root
      MINIO_SECRET_KEY: ${__MINIO_PASSWORD}
      SERVICE_NAME: minio
      SERVICE_TAGS: dev
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    entrypoint:
      sh -c "
        echo 'CREATE DATABASE IF NOT EXISTS source_code_v2; CREATE DATABASE IF NOT EXISTS master_telescope;  CREATE DATABASE IF NOT EXISTS sub_telescope;' > /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    environment:
      MYSQL_ROOT_PASSWORD: ${__DB_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./volumes/dbdata/:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - legacy
  redis:
    image: redis:5.0.5
    container_name: redis
    restart: unless-stopped
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redisdata/:/data/
    environment: 
      REDIS_PASSWORD: ${__REDIS_PASSWORD}
    networks:
      - legacy
  rabbitmq:
    build:
      context: ./rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./src/subCODE/rabbitmq.config.json:/etc/rabbitmq/rabbitmq.config.json
      - ./volumes/rabbitmqdata/:/var/lib/rabbitmq/
    restart: unless-stopped
    networks:
      - legacy
    environment:
      SERVICE_NAME: rabbitmq
      SERVICE_TAGS: dev
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
     - PMA_ARBITRARY=1
    restart: always
    ports:
     - 50:80
    volumes:
     - ./volumes/pma/:/sessions
    networks:
      - legacy

networks: 
  legacy:
    driver: bridge
