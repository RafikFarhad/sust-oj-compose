version: "3.7"

services:
  nginx:
    container_name: soc_nginx
    build:
      context: ./nginx
    ports:
      - 80:80
    restart: unless-stopped
    volumes:
      - ./src/subCODE/:/var/www/subCODE
      - ./src/masterCODE/:/var/www/masterCODE
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf/sites-enabled/:/etc/nginx/sites-enabled/
    depends_on:
      - db_mysql
      - subcode
      - mastercode
      - docode
      - livecode
      - minio
    networks:
      - legacy
  subcode:
    container_name: soc_subcode
    build:
      context: ./src/subCODE
      dockerfile: ./Dockerfile.dev
      args:
        BUILD: ${DENV}
        DEBUG_IDE_KEY: subdebug
        DEBUG_PORT: 9000
    working_dir: /var/www/subCODE
    volumes:
      - ./src/subCODE/:/var/www/subCODE
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 8080:9000
    networks:
      - legacy
    extra_hosts:
      - code.local:${HOST_IP}
      - master.code.local:${HOST_IP}
      - judge.code.local:${HOST_IP}
      - live.code.local:${HOST_IP}
      - redis.code.local:${HOST_IP}
      - rmq.code.local:${HOST_IP}
      - content.code.local:${HOST_IP}
      - mysql.code.local:${HOST_IP}
    environment:
      - DB_PASSWORD=${DB_MYSQL_PASSWORD}
  mastercode:
    container_name: soc_mastercode
    build:
      context: ./src/masterCODE
      dockerfile: ./Dockerfile.dev
      args:
        BUILD: ${DENV}
        DEBUG_IDE_KEY: masterdebug
        DEBUG_PORT: 9001
    working_dir: /var/www/masterCODE
    volumes:
      - ./src/masterCODE/:/var/www/masterCODE
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 8081:9000
    networks:
      - legacy
    extra_hosts:
      - code.local:${HOST_IP}
      - master.code.local:${HOST_IP}
      - judge.code.local:${HOST_IP}
      - live.code.local:${HOST_IP}
      - redis.code.local:${HOST_IP}
      - rmq.code.local:${HOST_IP}
      - content.code.local:${HOST_IP}
      - mysql.code.local:${HOST_IP}
    environment:
      - DB_PASSWORD=${DB_MYSQL_PASSWORD}
  livecode:
    container_name: soc_livecode
    build:
      context: ./src/liveCODE
      dockerfile: ./Dockerfile.dev
    working_dir: /var/www/liveCODE
    entrypoint: bash -c "yarn dev"
    volumes:
      - ./src/liveCODE/:/var/www/liveCODE/
      - ./src/subCODE/:/var/www/subCODE/
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 3333:3333
    networks:
      - legacy
    extra_hosts:
      - code.local:${HOST_IP}
      - master.code.local:${HOST_IP}
      - judge.code.local:${HOST_IP}
      - live.code.local:${HOST_IP}
      - redis.code.local:${HOST_IP}
      - rmq.code.local:${HOST_IP}
    depends_on:
      - redis
      - rabbitmq
  docode:
    container_name: soc_docode
    build:
      context: ./src/doCODE
      dockerfile: ./Dockerfile.dev
    working_dir: /var/www
    entrypoint: bash -c "yarn dev"
    volumes:
      - ./src/doCODE/:/var/www/
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 8083:3000
    networks:
      - legacy
    extra_hosts:
      - code.local:${HOST_IP}
      - master.code.local:${HOST_IP}
      - judge.code.local:${HOST_IP}
      - live.code.local:${HOST_IP}
      - redis.code.local:${HOST_IP}
      - rmq.code.local:${HOST_IP}
      - content.code.local:${HOST_IP}
    environment:
      HOST: "0.0.0.0"
  db_mysql:
    container_name: soc_mysql
    image: mysql:5.7.22
    entrypoint: sh -c "/usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    volumes:
      - ./volumes/dbdata/:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_MYSQL_PASSWORD}
      - MYSQL_ROOT_HOST=%
  redis:
    container_name: soc_redis
    image: redis:5.0.5
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redisdata/:/data/
    restart: unless-stopped
    networks:
      - legacy
  rabbitmq:
    container_name: soc_rabbitmq
    build:
      context: ./rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    # command: rabbitmq-server
    volumes:
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq/rabbitmq.config.json:/etc/rabbitmq/rabbitmq.config.json
      - ./volumes/rabbitmqdata/:/var/lib/rabbitmq/
    restart: unless-stopped
    networks:
      - legacy
  minio:
    container_name: soc_minio
    image: minio/minio:RELEASE.2020-12-29T23-29-29Z
    volumes:
      - ./volumes/minio:/data
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - 8084:9000
    command: server /data
    networks:
      - legacy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      MINIO_ACCESS_KEY: root
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: soc_phpmyadmin
    environment:
      - PMA_HOST=mysql.code.local
    restart: always
    ports:
      - 50:80
    volumes:
      - ./volumes/pma/:/sessions
    networks:
      - legacy
    extra_hosts:
      - mysql.code.local:${HOST_IP}
networks:
  legacy:
    driver: bridge
